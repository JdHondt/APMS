buildscript {
	ext {
		springBootVersion = '2.1.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'gb.vhs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
}

ext['springCloudVersion'] = 'Greenwich.RC2'

dependencies {
	// Build tools
	implementation('org.projectlombok:lombok:1.14.8')

    compile "org.springframework.kafka:spring-kafka"
	// Basic API tools & security
	implementation('org.springframework.boot:spring-boot-starter-web')
//	implementation('org.springframework.boot:spring-boot-starter-security')
//	implementation('org.springframework.cloud:spring-cloud-starter-oauth2')

	implementation('net.minidev:json-smart:1.1.1')
	implementation('com.udojava:EvalEx:2.1') // See https://github.com/uklimaschewski/EvalEx

	// Database tools
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-jdbc')
	runtimeOnly('mysql:mysql-connector-java')

	// JSON Serialization & Deserialization
	implementation('com.fasterxml.jackson.datatype:jackson-datatype-jdk8') // other Java 8 types like Optional
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310') // Java 8 Date & Time API data types
	implementation('com.github.bohnman:squiggly-filter-jackson:1.3.14')

	// Email tools
	implementation('org.springframework.boot:spring-boot-starter-mail')
	implementation('javax.mail:mail:1.4.1')

	// Push notifications
	implementation('com.notnoop.apns:apns:1.0.0.Beta6') // iOS

	// Other
	implementation('org.apache.commons:commons-math3:3.6.1')
	implementation('com.google.code.gson:gson:2.8.5')


	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


bootRun {
	systemProperties System.properties
}